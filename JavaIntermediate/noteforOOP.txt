Classes have this following:
1. Attribute {
    is like variables, identity, currentstate
}

2. Method {
    is like function, method, behavior
}

Objective in OOP (or you can visit W3school to learn more the OOP concept): 
                     module 1: Classes and Objects
1. OOP (read below)
2. learn Creating Class and Objects
3. learn Class Attributes
4. learn Access Modifier 
5. learn Getters and Setters 
6. learn Constructor
7. learn Access Modifier 
8. learn Value & Reference Types
9. learn The Math Class
10. learn Static
11. learn Final
12. learn Packages
13. learn Java 2 Module 1 Quiz
                                                                Object-Orientation
Java uses Object-Oriented Programming (OOP), a programming style that is intended to make thinking about programming closer to thinking about the real world.

In OOP, each object is an independent unit with a unique identity, just as objects in the real world are.

example:
            An apple is an object; so is a mug. Each has its unique identity. It's possible to have two mugs that look identical, but they are still separate, unique objects.

            Objects also have characteristics, which are used to describe them.

            For example, a car can be red or blue, a mug can be full or empty, and so on. These characteristics are also called attributes. An attribute describes the current state of an object.

            In the real world, each object behaves in its own way. The car moves, the phone rings, and so on.

            The same applies to objects: behavior is specific to the object's type.



            In summary, in object oriented programming, each object has three dimensions: identity, attributes, and behavior.

            Attributes describe the object's current state, and what the object is capable of doing is demonstrated through the object's behavior.



                                                                      Classes
A class describes what the object will be, but is separate from the object itself.

In other words, classes can be described as blueprints, descriptions, or definitions for an object. You can use the same class as a blueprint for creating multiple objects. The first step is to define the class, which then becomes a blueprint for object creation.

Each class has a name, and each is used to define attributes and behavior.

Some examples of attributes and behavior:



âœ… 1. Using String.valueOf()
int number = 42;
String str = String.valueOf(number);  // "42"

double price = 19.99;
String str2 = String.valueOf(price);  // "19.99"

âœ… 2. Using + "" shortcut
int age = 20;
String strAge = age + "";  // "20"

double pi = 3.14;
String strPi = pi + "";    // "3.14"
ðŸ”¸ This is a quick trick Java developers often use.

âœ… 3. Using Integer.toString() / Double.toString()
int x = 100;
String s1 = Integer.toString(x);

double y = 25.5;
String s2 = Double.toString(y);

ðŸ§  Bonus: Convert String back to int/double
int a = Integer.parseInt("123");
double b = Double.parseDouble("45.67");
