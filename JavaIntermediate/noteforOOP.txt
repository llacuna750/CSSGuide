Classes have this following:
1. Attribute {
    is like variables, identity, currentstate
}

2. Method {
    is like function, method, behavior
}

Objective in OOP (or you can visit W3school to learn more the OOP concept): 
                     module 1: Classes and Objects
1. OOP (read below)
2. learn Creating Class and Objects
3. learn Class Attributes
4. learn Access Modifier 
5. learn Getters and Setters 
6. learn Constructor
7. learn Access Modifier 
8. learn Value & Reference Types
9. learn The Math Class
10. learn Static
11. learn Final
12. learn Packages
13. learn Java 2 Module 1 Quiz
                                                                Object-Orientation
Java uses Object-Oriented Programming (OOP), a programming style that is intended to make thinking about programming closer to thinking about the real world.

In OOP, each object is an independent unit with a unique identity, just as objects in the real world are.

example:
            An apple is an object; so is a mug. Each has its unique identity. It's possible to have two mugs that look identical, but they are still separate, unique objects.

            Objects also have characteristics, which are used to describe them.

            For example, a car can be red or blue, a mug can be full or empty, and so on. These characteristics are also called attributes. An attribute describes the current state of an object.

            In the real world, each object behaves in its own way. The car moves, the phone rings, and so on.

            The same applies to objects: behavior is specific to the object's type.



            In summary, in object oriented programming, each object has three dimensions: identity, attributes, and behavior.

            Attributes describe the object's current state, and what the object is capable of doing is demonstrated through the object's behavior.



                                                                      Classes
A class describes what the object will be, but is separate from the object itself.

In other words, classes can be described as blueprints, descriptions, or definitions for an object. You can use the same class as a blueprint for creating multiple objects. The first step is to define the class, which then becomes a blueprint for object creation.

Each class has a name, and each is used to define attributes and behavior.

Some examples of attributes and behavior:



‚úÖ 1. Using String.valueOf()
int number = 42;
String str = String.valueOf(number);  // "42"

double price = 19.99;
String str2 = String.valueOf(price);  // "19.99"

‚úÖ 2. Using + "" shortcut
int age = 20;
String strAge = age + "";  // "20"

double pi = 3.14;
String strPi = pi + "";    // "3.14"
üî∏ This is a quick trick Java developers often use.

‚úÖ 3. Using Integer.toString() / Double.toString()
int x = 100;
String s1 = Integer.toString(x);

double y = 25.5;
String s2 = Double.toString(y);

üß† Bonus: Convert String back to int/double
int a = Integer.parseInt("123");
double b = Double.parseDouble("45.67");


Example
A static method can be accessed without creating an object of the class first:

public class Main {
  // Static method
  static void myStaticMethod() {
    System.out.println("Static methods can be called without creating objects");
  }

  // Public method
  public void myPublicMethod() {
    System.out.println("Public methods must be called by creating objects");
  }

  // Main method
  public static void main(String[ ] args) {
    myStaticMethod(); // Call the static method
    // myPublicMethod(); This would output an error

    Main myObj = new Main(); // Create an object of Main
    myObj.myPublicMethod(); // Call the public method
  }
}

Definition and Usage
The static keyword is a non-access modifier used for methods and attributes. Static methods/attributes can be accessed without creating an object of a class.

There are 4 core concepts in OOP: encapsulation, inheritance, polymorphism, and abstraction.


/*                                                                                                  inheritance
‚úÖ What is Inheritance?
Inheritance is a mechanism where one class (child/subclass) can reuse the properties and methods of another class (parent/superclass).

üîÅ Inheritance promotes code reusability and establishes an "is-a" relationship.

üß† Real-Life Analogy
Think of it like this:

Animal is a general class.

Dog is a specific type of Animal.

Dogs inherit characteristics like "breathing", "eating", and "moving" from Animal, but they can also have their own unique behaviors like "bark".

üîπ Superclass (Parent)
class Animal {
    public void eat() {
        System.out.println("This animal eats food.");
    }

    public void sleep() {
        System.out.println("This animal sleeps.");
    }
}

üîπ Subclass (Child)
class Dog extends Animal {
    public void bark() {
        System.out.println("The dog barks.");
    }
}

üîπ Main Method to Run It
public class Main {
    public static void main(String[] args) {
        Dog myDog = new Dog();

        myDog.eat();   // inherited from Animal
        myDog.sleep(); // inherited from Animal
        myDog.bark();  // defined in Dog
    }
}

üñ®Ô∏è Output:
This animal eats food.
This animal sleeps.
The dog barks.


‚ö†Ô∏è Important Notes:
* A protected attribute or method in a superclass can be accessed and initialized (or used) from a subclass, including inside the subclass constructor.
* If you don't have any method in your subclass if implementing the inheritance you can do the method() in that superclass.
  applicable only in: public, default except private access modifier.

* If you declare constructor to the Subclass B you can initialize the protected access modifier attribute or method.s


When one class is inherited from another class, it inherits all of the superclass' non-private variables and methods.
Example:
  class Animal {
    protected int legs;
    public void eat() {
      System.out.println("Animal eats");
    }
  }

  class Dog [b]extends [/b]Animal {
    Dog() {
      legs = 4;
    }
  }
* /



/*                        Open this to show Information...                                            Polymorphism  

  Polymorphism, which refers to the idea of "having many forms", occurs when there is a hierarchy of classes related to each other through inheritance.
  additional: Same person can have different roles.

  A call to a member method will cause a different implementation to be executed, depending on the type of the object invoking the method.

  Here is an example: Dog and Cat are classes that inherit from the Animal class. Each class has its own implementation of the makeSound() method.

    class Animal {
        public void makeSound() {
            System.out.println("Grr...");
        }
    }
    class Cat extends Animal {
        public void makeSound() {
            System.out.println("Meow");
        }
    }
    class Dog extends Animal {
        public void makeSound() {
            System.out.println("Woof");
        }
    }
    As all Cat and Dog objects are Animal objects, we can do the following in main:
    public static void main(String[ ] args) {
        Animal a = new Dog();
        Animal b = new Cat();
    }
    We've created two reference variables of type Animal, and pointed them to the Cat and Dog objects.
    Now, we can call the makeSound() methods.

    Briefly, polymorphism is...  
    Answer:   ... one method, with different implementations
*/


/*                                                                                            Method Overriding

  In the code above, the Cat class overrides the makeSound() method of its superclass Animal.

  Rules for Method Overriding:

  - Should have the same return type and arguments

  - The access level cannot be more restrictive than the overridden method's access level (Example: If the superclass method is declared public, the overriding method in the sub class can be neither private nor protected)

  - A method declared final or static cannot be overridden

  - If a method cannot be inherited, it cannot be overridden

  - Constructors cannot be overridden
*/


/*                                                                                            Method Overloading

  When methods have the same name, but different parameters, it is known as method overloading.

  This can be very useful when you need the same method functionality for different types of parameters.

  The following example illustrates a method that returns the maximum of its two parameters.

  What is the output of this code?

  class A {
    public void doSomething() {
      System.out.println("A");
    }

    public void doSomething(String str) {
      System.out.println(str);
    }
  }

  class B {
    public static void main(String[ ] args) {
      A object = new A();
      object.doSomething("B"); // Output: B
    }
  }
*/

/*                                                                                              Abstraction


  Data abstraction provides the outside world with only essential information, in a process of representing essential features without including implementation details.

  A good real-world example is a book. When you hear the term book, you don't know the exact specifics, such as the page count, the color, or the size, but you understand the idea, or abstraction, of a book.

  The concept of abstraction is that we focus on essential qualities, rather than the specific characteristics of one particular example.

  In Java, abstraction is achieved using abstract classes and interfaces.



  An abstract class is defined using the abstract keyword.

  - If a class is declared abstract it cannot be instantiated (you cannot create objects of that type).

  - To use an abstract class, you have to inherit it from another class.

  - Any class that contains an abstract method should be defined as abstract.

  An abstract method is a method that is declared without an implementation (without braces, and followed by a semicolon): 
  example: abstract void walk();


  For example, we can define our Animal class as abstract:

  abstract class Animal {
    int legs = 0;
    abstract void makeSound();
  }

  The makeSound() method is also abstract, as it has no implementation in the superclass.


  We can inherit from the Animal class and define the makeSound() method for the subclass:


  Every Animal makes a sound, but each has a different way to do it. That's why we define an abstract class Animal, and leave the implementation of how they make sounds to the subclasses.

  This is used when there is no meaningful definition for the method in the superclass.
*/


/*                                                                                              Interfaces

  An interface is a completely abstract class that contains only abstract methods.

  Some specifications for interfaces:

  - Defined using the interface keyword.

  - May contain only static final variables.

  - Cannot contain a constructor because interfaces cannot be instantiated.

  - Interfaces can extend other interfaces.

  - A class can implement any number of interfaces.

              An example of a simple interface:

              interface Animal {
                public void eat();
                public void makeSound();
              }

      Interfaces have the following properties:

      - An interface is implicitly abstract. You do not need to use the abstract keyword while declaring an interface.

      - Each method in an interface is also implicitly abstract, so the abstract keyword is not needed.

      - Methods in an interface are implicitly public.

  A class can inherit from just one superclass, but can implement multiple interfaces!


  Use the implements keyword to use an interface with your class.

  When you implement an interface, you need to override all of its methods.
*/

